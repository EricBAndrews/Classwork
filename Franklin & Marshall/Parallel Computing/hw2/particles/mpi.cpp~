#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <vector>
#include <mpi.h>
#include "common.h"
using namespace std;

//
//  tuned constants
//
#define density 0.0005
#define mass    0.01
#define cutoff  0.01
#define min_r   (cutoff/100)
#define dt      0.0005

// calculate particle's bin number
int binNum(particle_t &p, int bpr) {
  return (floor(p.x/cutoff) + bpr*floor(p.y/cutoff));
}

int procNum(int binNum, int bpr, int procWidth) {
  // int modBinNum = binNum % bpr;
  // return modBinNum / procWidth;
  return (binNum % bpr) / procWidth;
}

//
//  benchmarking program
//
int main(int argc, char **argv) {
  int navg, nabsavg = 0;
  double dmin, davg, absmin = 1.0, absavg = 0.0;

  if (find_option(argc, argv, "-h") >= 0) {
    printf( "Options:\n" );
    printf( "-h to see this help\n" );
    printf( "-n <int> to set the number of particles\n" );
    printf( "-o <filename> to specify the output file name\n" );
    printf( "-s <filename> to specify a summary file name\n" );
    printf( "-no turns off all correctness checks and particle output\n");
    return 0;
  }
    
  int n = read_int(argc, argv, "-n", 1000);

  char *savename = read_string(argc, argv, "-o", NULL);
  char *sumname = read_string(argc, argv, "-s", NULL);

  // set up mpi
  int n_proc, rank;
  MPI_Init(&argc, &argv);
  MPI_Comm_size(MPI_COMM_WORLD, &n_proc);
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);

  FILE *fsave = savename ? fopen(savename, "w") : NULL;
  FILE *fsum = sumname ? fopen (sumname, "a") : NULL;

  // create particle datatype
  MPI_Datatype PARTICLE;
  MPI_Type_contiguous(6, MPI_DOUBLE, &PARTICLE);
  MPI_Type_commit(&PARTICLE);
    
  // create spatial bins (of size cutoff by cutoff)
  double size = sqrt(density * n);
  int bpr = ceil(size / cutoff);
  int numbins = bpr * bpr;
  int rpp = bpr / n_proc; // rows per process
  if (rpp * n_proc < numbins) {
    ++rpp;
  }
  int binsPerProc = bpr * rpp + bpr * 2;
  vector<particle_t*> *bins = new vector<particle_t*>[binsPerProc];
  
  // initialize particles
  if (rank == 0) {
    particle_t *particles = (particle_t*) malloc(n * sizeof(particle_t));
    set_size(n);
    init_particles(n, particles);
    // put particles into vectors to send
    vector<particle_t*> *processVecs = new vector<particle_t*>[n_proc];
    for (int i = 0; i < n; ++i) {
      int procWidth = bpr / n_proc;
      int curProcNum = procNum(binNum(particles[i], bpr), bpr, procWidth);
      processVecs[curProcNum].push_back(&particles[i]);
    }
    // send vectors to processes
    for (int i = 0; i < n_proc; ++i) {
      int sizeToSend = processVecs[i].size();
      MPI_Send(&sizeToSend, 1, MPI_INT, i, 0, MPI_COMM_WORLD);
      MPI_Send(&processVecs[i], processVecs[i].size(), PARTICLE, i, 1,
               MPI_COMM_WORLD);
    }
  }

  // recieve vectors
  int numMyParticles;
  MPI_Recv(&numMyParticles, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
  particle_t *myParticles = (particle_t*) malloc(numMyParticles *
                                                 sizeof(particle_t));
  MPI_Recv(&myParticles, numMyParticles, PARTICLE, 0, 1, MPI_COMM_WORLD,
           MPI_STATUS_IGNORE);

  //
  //  simulate a number of time steps
  //
  double simulation_time = read_timer();
  for (int step = 0; step < NSTEPS; step++) {
    navg = 0;
    davg = 0.0;
    dmin = 1.0;

    // clear bins at each time step
    for (int m = 0; m < numbins; m++) {
      bins[m].clear();
    }
    
    // place particles in bins
    int procWidth = bpr / n_proc;
    if (procWidth * n_proc < bpr) {
      ++procWidth;
    }
    for (int i = 0; i < n; ++i) {
      int curBinNum = binNum(myParticles[i], bpr);
      if (procNum(curBinNum, bpr, procWidth) == rank) { // if the particle is mine
        bins[curBinNum].push_back(myParticles + i);
      }
      // bins[binNum(particles[i],bpr)].push_back(particles + i);
    }

    //
    //  compute forces
    //
    for (int p = 0; p < n; ++p) {
      myParticles[p].ax = myParticles[p].ay = 0;
        
      // find current particle's bin, handle boundaries
      int cbin = binNum(myParticles[p], bpr);
      int lowi = -1, highi = 1, lowj = -1, highj = 1;
      if (cbin < bpr) {
        lowj = 0;
      }
      if (cbin % bpr == 0) {
        lowi = 0;
      }
      if (cbin % bpr == (bpr-1)) {
        highi = 0;
      }
      if (cbin >= bpr*(bpr-1)) {
        highj = 0;
      }

      // apply nearby forces
      for (int i = lowi; i <= highi; ++i) {
        for (int j = lowj; j <= highj; ++j) {
          int nbin = cbin + i + bpr*j;
          for (int k = 0; k < bins[nbin].size(); ++k) {
            apply_force(myParticles[p], *bins[nbin][k], &dmin, &davg, &navg);
          }
        }
      }
    }
        
    //
    //  move particles
    //
    for( int p = 0; p < n; p++ ) 
      move( myParticles[p] );      

    if( find_option( argc, argv, "-no" ) == -1 )
    {       	
      //
      //  computing statistical data
      //
      if (navg) {
        absavg += davg/navg;
        nabsavg++;
      }
      if (dmin < absmin) absmin = dmin;
 
      //
      //  save if necessary
      //
      if( fsave && (step%SAVEFREQ) == 0 )
        save( fsave, n, myParticles );
    }
  }
  simulation_time = read_timer( ) - simulation_time;
    
  printf( "n = %d, simulation time = %g seconds", n, simulation_time);

  if( find_option( argc, argv, "-no" ) == -1 )
  {
    if (nabsavg) absavg /= nabsavg;
    // 
    //  -the minimum distance absmin between 2 particles during the run of the simulation
    //  -A Correct simulation will have particles stay at greater than 0.4 (of cutoff) with typical values between .7-.8
    //  -A simulation were particles don't interact correctly will be less than 0.4 (of cutoff) with typical values between .01-.05
    //
    //  -The average distance absavg is ~.95 when most particles are interacting correctly and ~.66 when no particles are interacting
    //
    printf( ", absmin = %lf, absavg = %lf", absmin, absavg);
    if (absmin < 0.4) printf ("\nThe minimum distance is below 0.4 meaning that some particle is not interacting");
    if (absavg < 0.8) printf ("\nThe average distance is below 0.8 meaning that most particles are not interacting");
  }
  printf("\n");

  //
  // Printing summary data
  //
  if( fsum)
    fprintf(fsum,"%d %g\n",n,simulation_time);

  //
  // Clearing space
  //
  if( fsum )
    fclose( fsum );
  free( myParticles );
  delete [] bins;
  if( fsave )
    fclose( fsave );

  MPI_Finalize();
  
  return 0;
}
